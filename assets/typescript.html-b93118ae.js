import{_ as n,V as s,W as a,a1 as t}from"./framework-8aef05fa.js";const e="/assets/image/image-20230308160121330.png",p={},o=t(`<h1 id="typescript安装-npm全局" tabindex="-1"><a class="header-anchor" href="#typescript安装-npm全局" aria-hidden="true">#</a> typescript安装（npm全局）</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="编译、运行" tabindex="-1"><a class="header-anchor" href="#编译、运行" aria-hidden="true">#</a> 编译、运行</h1><p><strong>源码：<code>basetype.ts</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 数字类型</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token string">&#39;I am who I am&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 字符串类型</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 布尔类型</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>编译：生成<code>basetype.js</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc basetype.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行：<code>basetype.js</code></strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> basetype.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>效果：</strong></p><figure><img src="`+e+`" alt="image-20230308160121330" tabindex="0" loading="lazy"><figcaption>image-20230308160121330</figcaption></figure><h1 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型" aria-hidden="true">#</a> 基础类型</h1><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">关键字</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">any类型</td><td style="text-align:center;">any</td><td style="text-align:center;">声明为 any 的变量可以赋予任意类型的值。</td></tr><tr><td style="text-align:center;">unknown类型</td><td style="text-align:center;">unknown</td><td style="text-align:center;">赋值时跟 any 相似，但使用前需检查类型。</td></tr><tr><td style="text-align:center;">数字类型</td><td style="text-align:center;">number</td><td style="text-align:center;">双精度 64 位浮点值。它可以用来表示整数和分数。</td></tr><tr><td style="text-align:center;">字符串类型</td><td style="text-align:center;">string</td><td style="text-align:center;">一个字符系列，使用单引号（<strong>&#39;</strong>）或双引号（<strong>&quot;</strong>）来表示字符串类型。反引号（<strong>\`</strong>）来定义多行文本和内嵌表达式。</td></tr><tr><td style="text-align:center;">布尔类型</td><td style="text-align:center;">boolean</td><td style="text-align:center;">表示逻辑值：true 和 false。</td></tr><tr><td style="text-align:center;">数组类型</td><td style="text-align:center;">无</td><td style="text-align:center;">声明变量为数组。</td></tr><tr><td style="text-align:center;">元组</td><td style="text-align:center;">无</td><td style="text-align:center;">元组类型用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同。</td></tr><tr><td style="text-align:center;">枚举</td><td style="text-align:center;">enum</td><td style="text-align:center;">枚举类型用于定义数值集合。</td></tr><tr><td style="text-align:center;">void</td><td style="text-align:center;">void</td><td style="text-align:center;">用于标识方法返回值的类型，表示该方法没有返回值。</td></tr><tr><td style="text-align:center;">null</td><td style="text-align:center;">null</td><td style="text-align:center;">表示对象值缺失。</td></tr><tr><td style="text-align:center;">undefined</td><td style="text-align:center;">undefined</td><td style="text-align:center;">用于初始化变量为一个未定义的值</td></tr><tr><td style="text-align:center;">never</td><td style="text-align:center;">never</td><td style="text-align:center;">never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</td></tr></tbody></table><h2 id="any-类型-unknown-类型区别" tabindex="-1"><a class="header-anchor" href="#any-类型-unknown-类型区别" aria-hidden="true">#</a> any 类型/ unknown 类型区别</h2><p>任意值是 <code>typescript</code> 针对编程时类型不明确的变量使用的一种数据类型，它常用于以下三种情况。</p><ol><li>任何类型都可以是 <code>any</code> 类型，<code>any</code> 类型就相当于是免检标签，给了开发者很大的自由，<code>typescript </code> 允许 <code>any</code> 类型的值进行任何操作，对它一路绿灯。</li><li>任何类型也都可以是 <code>unknown</code> 类型，但与 <code>any</code> 完全相反，<code>unknown</code> 类型就像是 <code>typescript</code> 给打上了一个重点检查的标签。在没有对它进行类型检查之前，<code>unknown</code> 类型的变量是不能进行任何操作的。</li><li>任意类型的值都是可以复制给 <code>any</code> 与 <code>unknown</code> 二者， <code>any</code> 会绕过类型检查，直接可用，而 <code>unknown</code> 则必须要在判断完它是什么类型之后才能继续用，<code>any</code> 就是个自行车辅助轮, 习惯了 <code>typescript</code> 的强类型检查规则应该尽快扔掉使用类型更安全的 <code>unknown</code> 。</li></ol><h1 id="typescript-类型保护" tabindex="-1"><a class="header-anchor" href="#typescript-类型保护" aria-hidden="true">#</a> typescript 类型保护</h1><p><code>typescript</code> 使用了一些内置的 <code>javascript</code> 操作符，<strong>比如 <code>typeof</code>、<code>instanceof</code> 和 <code>in</code> 操作符，这些操作符用于确定一个对象是否包含属性。</strong> 类型保护可以让你指导 <code>typescript</code> 编译器在特定的上下文中推断出变量的特定类型，确保参数的类型与你指定的一致。</p><ol><li><p><code>typeof</code> 判断变量是否为某种类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Error，在这个代码块中，target 是 string 类型，没有 toFixed 方法</span>
    <span class="token keyword">return</span> target<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
    
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>
    <span class="token keyword">return</span> <span class="token operator">+</span><span class="token punctuation">[</span><span class="token operator">...</span>target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
    
  target<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// Error，在这个代码块中，target 是 string 或 number 类型，没有 forEach 方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>instanceof</code> 判断对象是否为某个对象的实例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token keyword">public</span> group<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">public</span> keyword<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">typeGuard</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> User <span class="token operator">|</span> Log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arg<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">15</span> <span class="token comment">// Error, User 类型无此属性</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token keyword">instanceof</span> <span class="token class-name">Log</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arg<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">15</span> <span class="token comment">// OK</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>in</code> 判断属性是否存在于某个对象上</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
  <span class="token keyword">public</span> groups<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> count<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token keyword">public</span> keyword<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">typeGuard</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> User <span class="token operator">|</span> Log<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;nickname&#39;</span> <span class="token keyword">in</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (parameter) arg: User，编辑器将推断在当前块作用域 arg 为 User 类型</span>
    arg<span class="token punctuation">.</span>nickname <span class="token operator">=</span> <span class="token string">&#39;imooc&#39;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span> <span class="token keyword">in</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (parameter) arg: Log，编辑器将推断在当前块作用域 arg 为 Log 类型</span>
    arg<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">15</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>as</code>或<code>&lt;&gt;</code>断言</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> someValue<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&quot;this is a string&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> strLength1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// &lt;&gt;</span>
<span class="token keyword">let</span> strLength2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// as</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字面量类型保护</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Success</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  object<span class="token operator">:</span> object
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Fail</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  errMsg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  request<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> Success <span class="token operator">|</span> Fail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>success <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token comment">// OK</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>errMsg<span class="token punctuation">)</span> <span class="token comment">// Error, Property &#39;errMsg&#39; does not exist on type &#39;Success&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>errMsg<span class="token punctuation">)</span> <span class="token comment">// OK</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token comment">// Error, Property &#39;object&#39; does not exist on type &#39;Fail&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,19),c=[o];function l(i,r){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","typescript.html.vue"]]);export{d as default};
